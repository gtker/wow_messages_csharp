// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace WowMessages.Generator.Generated
{
    [JsonConverter(typeof(TestCaseValueUpdateMaskContentUpdateMaskTypeJsonConverter))]
    public enum TestCaseValueUpdateMaskContentUpdateMaskType
    {
        Container,

        Corpse,

        DynamicObject,

        GameObject,

        Item,

        Object_,

        Player,

        Unit,
    }
    public class TestCaseValueUpdateMaskContentUpdateMaskTypeJsonConverter : JsonConverter<TestCaseValueUpdateMaskContentUpdateMaskType>
    {
        public override TestCaseValueUpdateMaskContentUpdateMaskType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "Container":
                    return TestCaseValueUpdateMaskContentUpdateMaskType.Container;
                case "Corpse":
                    return TestCaseValueUpdateMaskContentUpdateMaskType.Corpse;
                case "DynamicObject":
                    return TestCaseValueUpdateMaskContentUpdateMaskType.DynamicObject;
                case "GameObject":
                    return TestCaseValueUpdateMaskContentUpdateMaskType.GameObject;
                case "Item":
                    return TestCaseValueUpdateMaskContentUpdateMaskType.Item;
                case "Object":
                    return TestCaseValueUpdateMaskContentUpdateMaskType.Object_;
                case "Player":
                    return TestCaseValueUpdateMaskContentUpdateMaskType.Player;
                case "Unit":
                    return TestCaseValueUpdateMaskContentUpdateMaskType.Unit;
                default:
                    throw new ArgumentException(String.Format("Bad TestCaseValueUpdateMaskContentUpdateMaskType value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, TestCaseValueUpdateMaskContentUpdateMaskType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case TestCaseValueUpdateMaskContentUpdateMaskType.Container:
                    JsonSerializer.Serialize<string>(writer, "Container", options);
                    return;
                case TestCaseValueUpdateMaskContentUpdateMaskType.Corpse:
                    JsonSerializer.Serialize<string>(writer, "Corpse", options);
                    return;
                case TestCaseValueUpdateMaskContentUpdateMaskType.DynamicObject:
                    JsonSerializer.Serialize<string>(writer, "DynamicObject", options);
                    return;
                case TestCaseValueUpdateMaskContentUpdateMaskType.GameObject:
                    JsonSerializer.Serialize<string>(writer, "GameObject", options);
                    return;
                case TestCaseValueUpdateMaskContentUpdateMaskType.Item:
                    JsonSerializer.Serialize<string>(writer, "Item", options);
                    return;
                case TestCaseValueUpdateMaskContentUpdateMaskType.Object_:
                    JsonSerializer.Serialize<string>(writer, "Object", options);
                    return;
                case TestCaseValueUpdateMaskContentUpdateMaskType.Player:
                    JsonSerializer.Serialize<string>(writer, "Player", options);
                    return;
                case TestCaseValueUpdateMaskContentUpdateMaskType.Unit:
                    JsonSerializer.Serialize<string>(writer, "Unit", options);
                    return;
            }
        }
    }
}