// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Gtker.WowMessages.Generator.Generated
{
    [JsonConverter(typeof(IntegerTypeJsonConverter))]
    public enum IntegerType
    {
        I16,

        I32,

        I64,

        I8,

        U16,

        U32,

        U48,

        U64,

        U8,
    }
    public class IntegerTypeJsonConverter : JsonConverter<IntegerType>
    {
        public override IntegerType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string value = JsonSerializer.Deserialize<string>(ref reader, options);
            switch (value)
            {
                case "I16":
                    return IntegerType.I16;
                case "I32":
                    return IntegerType.I32;
                case "I64":
                    return IntegerType.I64;
                case "I8":
                    return IntegerType.I8;
                case "U16":
                    return IntegerType.U16;
                case "U32":
                    return IntegerType.U32;
                case "U48":
                    return IntegerType.U48;
                case "U64":
                    return IntegerType.U64;
                case "U8":
                    return IntegerType.U8;
                default:
                    throw new ArgumentException(String.Format("Bad IntegerType value: {0}", value));
            }
        }

        public override void Write(Utf8JsonWriter writer, IntegerType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case IntegerType.I16:
                    JsonSerializer.Serialize<string>(writer, "I16", options);
                    return;
                case IntegerType.I32:
                    JsonSerializer.Serialize<string>(writer, "I32", options);
                    return;
                case IntegerType.I64:
                    JsonSerializer.Serialize<string>(writer, "I64", options);
                    return;
                case IntegerType.I8:
                    JsonSerializer.Serialize<string>(writer, "I8", options);
                    return;
                case IntegerType.U16:
                    JsonSerializer.Serialize<string>(writer, "U16", options);
                    return;
                case IntegerType.U32:
                    JsonSerializer.Serialize<string>(writer, "U32", options);
                    return;
                case IntegerType.U48:
                    JsonSerializer.Serialize<string>(writer, "U48", options);
                    return;
                case IntegerType.U64:
                    JsonSerializer.Serialize<string>(writer, "U64", options);
                    return;
                case IntegerType.U8:
                    JsonSerializer.Serialize<string>(writer, "U8", options);
                    return;
            }
        }
    }
}
