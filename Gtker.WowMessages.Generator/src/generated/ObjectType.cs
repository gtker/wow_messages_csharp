// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Gtker.WowMessages.Generator.Generated
{
    [JsonConverter(typeof(ObjectTypeJsonConverter))]
    public abstract class ObjectType
    {
    }

    public class ObjectTypeJsonConverter : JsonConverter<ObjectType>
    {
        public override ObjectType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerCopy = reader;
            var tagValue = JsonDocument.ParseValue(ref reader).RootElement.GetProperty("container_type_tag").GetString();

            switch (tagValue)
            {
                case "CLogin":
                    return JsonSerializer.Deserialize<ObjectTypeClogin>(ref readerCopy, options);
                case "CMsg":
                    return JsonSerializer.Deserialize<ObjectTypeCmsg>(ref readerCopy, options);
                case "Msg":
                    return JsonSerializer.Deserialize<ObjectTypeMsg>(ref readerCopy, options);
                case "SLogin":
                    return JsonSerializer.Deserialize<ObjectTypeSlogin>(ref readerCopy, options);
                case "SMsg":
                    return JsonSerializer.Deserialize<ObjectTypeSmsg>(ref readerCopy, options);
                case "Struct":
                    return JsonSerializer.Deserialize<ObjectTypeStruct>(ref readerCopy, options);
                default:
                    throw new ArgumentException(String.Format("Bad ContainerTypeTag value: {0}", tagValue));
            }
        }

        public override void Write(Utf8JsonWriter writer, ObjectType value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}
