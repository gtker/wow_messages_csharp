// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Gtker.WowMessages.Generator.Generated
{
    [JsonConverter(typeof(TestCaseValueJsonConverter))]
    public abstract class TestCaseValue
    {
    }

    public class TestCaseValueJsonConverter : JsonConverter<TestCaseValue>
    {
        public override TestCaseValue Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerCopy = reader;
            var tagValue = JsonDocument.ParseValue(ref reader).RootElement.GetProperty("test_value_tag").GetString();

            switch (tagValue)
            {
                case "Array":
                    return JsonSerializer.Deserialize<TestCaseValueArray>(ref readerCopy, options);
                case "ArrayOfSubObject":
                    return JsonSerializer.Deserialize<TestCaseValueArrayOfSubObject>(ref readerCopy, options);
                case "Bool":
                    return JsonSerializer.Deserialize<TestCaseValueBool>(ref readerCopy, options);
                case "DateTime":
                    return JsonSerializer.Deserialize<TestCaseValueDateTime>(ref readerCopy, options);
                case "Enum":
                    return JsonSerializer.Deserialize<TestCaseValueEnum>(ref readerCopy, options);
                case "Flag":
                    return JsonSerializer.Deserialize<TestCaseValueFlag>(ref readerCopy, options);
                case "FloatingPoint":
                    return JsonSerializer.Deserialize<TestCaseValueFloatingPoint>(ref readerCopy, options);
                case "Gold":
                    return JsonSerializer.Deserialize<TestCaseValueGold>(ref readerCopy, options);
                case "Guid":
                    return JsonSerializer.Deserialize<TestCaseValueGuid>(ref readerCopy, options);
                case "Integer":
                    return JsonSerializer.Deserialize<TestCaseValueInteger>(ref readerCopy, options);
                case "IpAddress":
                    return JsonSerializer.Deserialize<TestCaseValueIpAddress>(ref readerCopy, options);
                case "Level":
                    return JsonSerializer.Deserialize<TestCaseValueLevel>(ref readerCopy, options);
                case "Milliseconds":
                    return JsonSerializer.Deserialize<TestCaseValueMilliseconds>(ref readerCopy, options);
                case "MonsterMoveSpline":
                    return JsonSerializer.Deserialize<TestCaseValueMonsterMoveSpline>(ref readerCopy, options);
                case "Population":
                    return JsonSerializer.Deserialize<TestCaseValuePopulation>(ref readerCopy, options);
                case "Seconds":
                    return JsonSerializer.Deserialize<TestCaseValueSeconds>(ref readerCopy, options);
                case "String":
                    return JsonSerializer.Deserialize<TestCaseValueString>(ref readerCopy, options);
                case "SubObject":
                    return JsonSerializer.Deserialize<TestCaseValueSubObject>(ref readerCopy, options);
                case "UpdateMask":
                    return JsonSerializer.Deserialize<TestCaseValueUpdateMask>(ref readerCopy, options);
                default:
                    throw new ArgumentException(String.Format("Bad TestValueTag value: {0}", tagValue));
            }
        }

        public override void Write(Utf8JsonWriter writer, TestCaseValue value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}
