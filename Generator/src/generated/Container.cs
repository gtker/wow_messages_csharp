// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace Generator.Generated
{
    public class Container
    {
        [JsonPropertyName("file_info")]
        public FileInfo FileInfo { get; set; }

        [JsonPropertyName("has_manual_size_field")]
        public bool HasManualSizeField { get; set; }

        [JsonPropertyName("manual_size_subtraction")]
        public ushort? ManualSizeSubtraction { get; set; }

        [JsonPropertyName("members")]
        public IList<StructMember> Members { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("object_type")]
        public ObjectType ObjectType { get; set; }

        [JsonPropertyName("only_has_io_error")]
        public bool OnlyHasIoError { get; set; }

        /// <summary>
        /// Is a structured representation of the object where fields that
        /// are inside if statements will be put inside the enumerators they
        /// are present in. This is used for example when wanting to represent
        /// conditionally present fields through e.g. discriminated unions or
        /// inheritance.
        /// </summary>
        [JsonPropertyName("prepared_objects")]
        public IList<PreparedObject> PreparedObjects { get; set; }

        [JsonPropertyName("sizes")]
        public Sizes Sizes { get; set; }

        [JsonPropertyName("tags")]
        public ObjectTags Tags { get; set; }

        [JsonPropertyName("tests")]
        public IList<TestCase> Tests { get; set; }
    }
}
