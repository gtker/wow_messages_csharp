// Code generated by jtd-codegen for C# + System.Text.Json v0.2.1

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Generator.Generated
{
    [JsonConverter(typeof(UpdateMaskDataTypeJsonConverter))]
    public abstract class UpdateMaskDataType
    {
    }

    public class UpdateMaskDataTypeJsonConverter : JsonConverter<UpdateMaskDataType>
    {
        public override UpdateMaskDataType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerCopy = reader;
            var tagValue = JsonDocument.ParseValue(ref reader).RootElement.GetProperty("update_mask_type_tag").GetString();

            switch (tagValue)
            {
                case "ArrayOfStruct":
                    return JsonSerializer.Deserialize<UpdateMaskDataTypeArrayOfStruct>(ref readerCopy, options);
                case "Bytes":
                    return JsonSerializer.Deserialize<UpdateMaskDataTypeBytes>(ref readerCopy, options);
                case "Float":
                    return JsonSerializer.Deserialize<UpdateMaskDataTypeFloat>(ref readerCopy, options);
                case "Guid":
                    return JsonSerializer.Deserialize<UpdateMaskDataTypeGuid>(ref readerCopy, options);
                case "GuidArrayUsingEnum":
                    return JsonSerializer.Deserialize<UpdateMaskDataTypeGuidArrayUsingEnum>(ref readerCopy, options);
                case "Int":
                    return JsonSerializer.Deserialize<UpdateMaskDataTypeInt>(ref readerCopy, options);
                case "TwoShort":
                    return JsonSerializer.Deserialize<UpdateMaskDataTypeTwoShort>(ref readerCopy, options);
                default:
                    throw new ArgumentException(String.Format("Bad UpdateMaskTypeTag value: {0}", tagValue));
            }
        }

        public override void Write(Utf8JsonWriter writer, UpdateMaskDataType value, JsonSerializerOptions options)
        {
            JsonSerializer.Serialize(writer, value, value.GetType(), options);
        }
    }
}
